index.html
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Trang Web Của Tôi</title>
</head>
<body>
    <header>
        <h1>Chào Mừng Đến Với Trang Web Của Tôi</h1>
    </header>
    <main>
        <p>Đây là một trang web mẫu.</p>
    </main>
    <footer>
        <p>Bản quyền © 2024</p>
    </footer>
    <script src="script.js"></script>
</body>
</html>
script.js
<div>Teachable Machine Image Model 
</div> <button type="button" onclick="init()">Start</button> <div id="webcam-container"></div> <div id="label-container">
</div> <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script> <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script> <script type="text/javascript"> // More API functions here: // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image // the link to your model provided by Teachable Machine export panel const URL = "https://teachablemachine.withgoogle.com/models/3tKg0eWsb/"; let model, webcam, labelContainer, maxPredictions; // Load the image model and setup the webcam async function init() { const modelURL = URL + "model.json"; const metadataURL = URL + "metadata.json"; // load the model and metadata // Refer to tmImage.loadFromFiles() in the API to support files from a file picker // or files from your local hard drive // Note: the pose library adds "tmImage" object to your window (window.tmImage) model = await tmImage.load(modelURL, metadataURL); maxPredictions = model.getTotalClasses(); // Convenience function to setup a webcam const flip = true; // whether to flip the webcam webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip await webcam.setup(); // request access to the webcam await webcam.play(); window.requestAnimationFrame(loop); // append elements to the DOM document.getElementById("webcam-container").appendChild(webcam.canvas); labelContainer = document.getElementById("label-container"); for (let i = 0; i < maxPredictions; i++) { // and class labels labelContainer.appendChild(document.createElement("div")); } } async function loop() { webcam.update(); // update the webcam frame await predict(); window.requestAnimationFrame(loop); } // run the webcam image through the image model async function predict() { // predict can take in an image, video or canvas html element const prediction = await model.predict(webcam.canvas); for (let i = 0; i < maxPredictions; i++) { const classPrediction = prediction[i].className + ": " + prediction[i].probability.toFixed(2); labelContainer.childNodes[i].innerHTML = classPrediction; } } </script>
style.css
body {
    font-family: 'Verdana', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #ffffff;
    color: #000;
}

header {
    background: #4CAF50;
    color: white;
    padding: 15px;
    text-align: center;
    border-bottom: 5px solid #388E3C;
}

main {
    padding: 20px;
}

h1, h2 {
    color: #4CAF50;
}

footer {
    text-align: center;
    padding: 20px;
    background: #4CAF50;
    color: white;
    position: relative;
}
